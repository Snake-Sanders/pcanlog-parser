defmodule PcanlogParserTest do
  use ExUnit.Case
  doctest PcanlogParser
  alias PcanlogParser, as: Parser

  # @tag :skip
  describe "P-CAN logs v1.1:" do
    test "parse log line" do
      example_line = "  5318)      2657.8  Rx         0102  8  15 7F FF 00 00 3E 59 00"

      entry = Parser.parse_line(example_line, :v1_1)

      assert is_map(entry)
      assert :msg_numb in Map.keys(entry)
      assert entry.msg_numb == "5318"

      assert :time_offset in Map.keys(entry)
      assert entry.time_offset == "2657.8"

      assert :type in Map.keys(entry)
      assert entry.type == "Rx"

      assert :can_id in Map.keys(entry)
      assert entry.can_id == "0102"

      assert :data_length in Map.keys(entry)
      assert entry.data_length == "8"

      assert :data_bytes in Map.keys(entry)
      assert entry.data_bytes == "157FFF00003E5900"
    end

    # @tag :skip
    test "parse log data" do
      data = """
      ;$FILEVERSION=1.1
      ;$STARTTIME=44629.7378008565
      ;
      ;   Start time: 09/03/2022 17:42:25.994.0
      ;   Generated by PCAN-View v4.3.4.615
      ;
      ;   Message Number
      ;   |         Time Offset (ms)
      ;   |         |        Type
      ;   |         |        |        ID (hex)
      ;   |         |        |        |     Data Length
      ;   |         |        |        |     |   Data Bytes (hex) ...
      ;   |         |        |        |     |   |
      ;---+--   ----+----  --+--  ----+---  +  -+ -- -- -- -- -- -- --
        5314)      2655.8  Rx         0102  8  15 00 00 00 00 3E 57 00
        5316)      2656.8  Rx         0102  8  15 00 00 00 00 3E 58 00
        5318)      2657.8  Rx         0102  8  15 7F FF 00 00 3E 59 00
      """

      entries = Parser.parse_log(data)

      assert length(entries) == 3
    end

    # @tag :skip
    test "Parse log file" do
      {:ok, entries} = Parser.parse_file("./test/samples/pcan_log_v1_1.trc")
      assert length(entries) == 12_869
    end
  end

  # @tag :skip
  describe "P-CAN logs v2.0:" do
    test "Parse line" do
      example_line = "   1307       653.492 DT     0102 Rx 8  15 00 05 00 00 D2 EB 00"
      entry = Parser.parse_line(example_line, :v2_0)

      assert is_map(entry)
      assert :msg_numb in Map.keys(entry)
      assert entry.msg_numb == "1307"

      assert :time_offset in Map.keys(entry)
      assert entry.time_offset == "653.492"

      assert :type in Map.keys(entry)
      assert entry.type == "DT"

      assert :can_id in Map.keys(entry)
      assert entry.can_id == "0102"

      assert :rx_tx in Map.keys(entry)
      assert entry.rx_tx == "Rx"

      assert :data_length in Map.keys(entry)
      assert entry.data_length == "8"

      assert :data_bytes in Map.keys(entry)
      assert entry.data_bytes == "1500050000D2EB00"
    end

    # @tag :skip
    test "Parse log data" do
      data = """
      ;$FILEVERSION=2.0
      ;$STARTTIME=44637.4918226157
      ;$COLUMNS=N,O,T,I,d,l,D
      ;
      ;   Start time: 17.03.2022 11:48:13.474.0
      ;   Generated by PCAN-View v4.3.0.596
      ;-------------------------------------------------------------------------------
      ;   Connection                 Bit rate
      ;   PCANLight_USB_16@pcan_usb  500 kBit/s
      ;-------------------------------------------------------------------------------
      ;   Message   Time    Type ID     Rx/Tx
      ;   Number    Offset  |    [hex]  |  Data Length
      ;   |         [ms]    |    |      |  |  Data [hex] ...
      ;   |         |       |    |      |  |  |
      ;---+-- ------+------ +- --+----- +- +- +- +- -- -- -- -- -- -- --
            1         0.481 DT     0102 Rx 8  15 00 05 00 00 D0 5E 00
            2         0.728 DT     0103 Rx 8  14 00 05 00 00 D0 5E 00
            3         1.486 DT     0102 Rx 8  15 00 05 00 00 D0 5F 00
      """

      entries = Parser.parse_log(data)

      assert length(entries) == 3
      last = List.last(entries)
      assert is_map(last)
      assert last.time_offset == "1.486"
    end

    # @tag :skip
    test "Parse log file" do
      {:ok, entries} = Parser.parse_file("./test/samples/pcan_log_v2_0.trc")
      assert length(entries) == 10_425
    end
  end
end
